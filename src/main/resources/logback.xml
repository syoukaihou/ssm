<?xml version="1.0" encoding="UTF-8"?>
<configuration>

	<!-- 定义变量 -->
	<!-- 日志文件大小 -->
	<property name="log.max.size" value="20MB" />

	<!-- 控制台输出 -->
	<appender name="stdout" class="ch.qos.logback.core.ConsoleAppender">
		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>
		</encoder>
	</appender>

	<!-- RollingFileAppender：滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件。 -->
	<appender name="rollingFile" class="ch.qos.logback.core.rolling.RollingFileAppender">

		<!-- 如果是 true，日志被追加到文件结尾，如果是 false，清空现存文件，默认是true。 -->
		<append>true</append>

		<!-- 当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名。 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">

			<!-- 必要节点，包含文件名及“%d”转换符， “%d”可以包含一个 java.text.SimpleDateFormat指定的时间格式， 如：%d{yyyy-MM}。 -->
			<fileNamePattern>logFile.%d{yyyy-MM-dd}.log</fileNamePattern>

			<!-- 可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件。 
			假设设置每天滚动，且 <maxHistory>是30，则只保存最近30天的文件，删除之前的旧文件。
			 注意，删除旧文件是，那些为了归档而创建的目录也会被删除。 -->
			<maxHistory>30</maxHistory>

		</rollingPolicy>

		<!-- 告知 RollingFileAppender 何时激活滚动。 -->
		<triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">

			<!-- 指定活动文件的大小，默认值是10MB -->
			<maxFileSize>${log.max.size}</maxFileSize>
		</triggeringPolicy>

		<encoder>
			<pattern>%-4relative [%thread] %-5level %logger{35} - %msg%n</pattern>
		</encoder>

	</appender>


	<!-- 按照大小切割日志 -->

	<!-- 根logger -->
	<root level="debug">
		<appender-ref ref="stdout" />
	</root>

	<!-- name：用来指定受此loger约束的某一个包或者具体的某一个类。
	1、没有配置level，将继承它的上一级<root>的日志级别“debug”。
    2、addtivity默认为true，将此logger的打印信息向上级传递。 
	3、没有设置appender，此logger本身不打印任何日志信息。 
	4、root接收到下级传递的信息，交给已配置好的名为“stdout”的appender处理。 -->
	<logger name="com.snsprj.controller" addtivity="false" level="debug">
		<appender-ref ref="stdout" />
	</logger>









</configuration>